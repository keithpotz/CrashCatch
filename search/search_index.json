{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CrashCatch","text":"<p>\ud83d\udca5 A modern, single-header crash reporting library for C++ on Windows and Linux.</p> <p> </p> <p> </p>"},{"location":"#-","title":"---","text":""},{"location":"#what-is-crashcatch","title":"\ud83d\ude80 What is CrashCatch?","text":"<p>CrashCatch is a modern, single-header crash reporting library for C++ applications \u2014 supporting both Windows and Linux.</p> <p>It automatically captures crashes, logs diagnostic information, generates <code>.dmp</code> (Windows) or <code>.txt</code> (Windows &amp; Linux) reports, and includes stack traces and environment metadata. From minimal CLI tools to full desktop apps, CrashCatch fits right in.</p> <p>Key highlights: - No external dependencies \u2014 just include the header - Full crash context (timestamp, platform, executable path, version, etc.) - Symbol resolution and demangling (platform-specific) - Configurable <code>onCrash()</code> and <code>onCrashUpload()</code> hooks - Optional crash dialog support (Windows GUI apps)</p> <p>As of v1.2.0, CrashCatch offers complete Linux support with signal handling, demangled stack traces, and crash context generation.</p>"},{"location":"#supported-platforms","title":"\u2705 Supported Platforms","text":"OS Supported Crash Handling Method Windows \u2705 Yes <code>SetUnhandledExceptionFilter</code> + MiniDump Linux \u2705 Yes POSIX signals (<code>signal()</code>) + backtrace macOS \ud83d\udea7 Planned POSIX + Mach exceptions"},{"location":"#quick-start","title":"\u26a1 Quick Start","text":""},{"location":"#zero-config-auto-init","title":"Zero Config (Auto-init)","text":"<pre><code>#define CRASHCATCH_AUTO_INIT\n#include \"CrashCatch.hpp\"\n\nint main() {\n    int* ptr = nullptr;\n    *ptr = 42; // simulated crash\n}\n</code></pre>"},{"location":"#one-liner-setup","title":"One-Liner Setup","text":"<pre><code>#include \"CrashCatch.hpp\"\n\nint main() {\n    CrashCatch::enable();\n    int* ptr = nullptr;\n    *ptr = 42;\n}\n</code></pre>"},{"location":"#full-config-example","title":"Full Config Example","text":"<pre><code>#include \"CrashCatch.hpp\"\n\nint main() {\n    CrashCatch::Config config;\n    config.appVersion = \"1.1.0\";\n    config.buildConfig = \"Release\";\n    config.additionalNotes = \"Test build\";\n    config.showCrashDialog = true;\n    config.onCrash = [] {\n        std::cout &lt;&lt; \"Cleaning up before crash...\\n\";\n    };\n\n    CrashCatch::initialize(config);\n\n    int* ptr = nullptr;\n    *ptr = 42;\n}\n</code></pre>"},{"location":"#installing-with-cmake","title":"\ud83d\udce6 Installing with CMake","text":"<pre><code>mkdir build &amp;&amp; cd build\ncmake .. -DCMAKE_INSTALL_PREFIX=./install\ncmake --build . --target install\n</code></pre> <p>Then in another project:</p> <pre><code>find_package(CrashCatch REQUIRED)\ntarget_link_libraries(MyApp PRIVATE CrashCatch::CrashCatch)\n</code></pre>"},{"location":"#examples","title":"\ud83e\uddea Examples","text":"<p>Explore working examples in the GitHub repo: - ZeroConfig - OneLiner - FullConfig - ThreadCrash - DivideByZero</p> <p>View Examples Folder</p>"},{"location":"#screenshots","title":"\ud83d\udcf8 Screenshots","text":""},{"location":"#features","title":"\ud83d\udee0 Features","text":"<ul> <li>\u2705 Header-only \u2014 single <code>.hpp</code>, no external dependencies</li> <li>\u2705 Cross-platform \u2014 Windows &amp; Linux support out of the box</li> <li>\u2705 Automatic Crash Capture \u2014 via <code>SetUnhandledExceptionFilter</code> (Windows) or POSIX signals (Linux)</li> <li>\u2705 Crash Context Info \u2014 includes executable path, build config, version, and notes</li> <li>\u2705 Crash Reporting:</li> <li><code>.dmp</code> (Windows) or <code>.txt</code> (Linux/Windows) crash files</li> <li>Detailed stack traces and environment info</li> <li>\u2705 Symbol Resolution:</li> <li>Top frame symbols (Windows)</li> <li>Demangled symbols (Linux)</li> <li>\u2705 onCrash Callback \u2014 run custom cleanup or logging logic with full crash context</li> <li>\u2705 Optional Crash Dialog \u2014 user-friendly message box (Windows only)</li> <li>\u2705 Configurable Dump Location, filename prefix, and timestamping</li> <li>\u2705 onCrashUpload Hook \u2014 pass report data to your custom uploader</li> <li>\u2705 CMake + CI Friendly \u2014 drop-in installation and build support</li> </ul>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>MIT License \u2014 created and maintained by Keith Pottratz GitHub Repo</p> <p>Created by Keith Pottratz MIT Licensed</p>"},{"location":"cmake/","title":"\u2699\ufe0f CMake Integration","text":"<p>CrashCatch supports modern CMake out of the box, with both header-only subdirectory usage and installable package support for larger or multi-project environments.</p>"},{"location":"cmake/#using-as-a-subdirectory","title":"\ud83e\udde9 Using as a Subdirectory","text":"<p>If you cloned or copied CrashCatch into your project, add this to your <code>CMakeLists.txt</code>:</p> <pre><code>add_subdirectory(CrashCatch)\n\nadd_executable(MyApp main.cpp)\ntarget_link_libraries(MyApp PRIVATE CrashCatch::CrashCatch)\n</code></pre> <p>This method is great for embedded or monorepo-style projects. It ensures that the CrashCatch target <code>INTERFACE</code> only is available immediatly without installation.</p>"},{"location":"cmake/#installing-to-your-system-optional","title":"\ud83d\udce6 Installing to Your System (Optional)","text":"<p>To install CrashCatch to your machine or a custom prefix:</p> <pre><code>mkdir build &amp;&amp; cd build\ncmake .. -DCMAKE_INSTALL_PREFIX=install\ncmake --build . --target install\n</code></pre> <p>This will generate: <pre><code>install/\n\u251c\u2500\u2500 include/CrashCatch.hpp\n\u2514\u2500\u2500 lib/cmake/CrashCatch/\n    \u251c\u2500\u2500 CrashCatchConfig.cmake\n    \u2514\u2500\u2500 CrashCatchTargets.cmake\n</code></pre></p>"},{"location":"cmake/#using-find_package","title":"\ud83d\udd0d Using find_package()","text":"<p>If you've installed CrashCatch via <code>cmake --install</code>, it can be imported in another project.</p> <pre><code>find_package(CrashCatch REQUIRED)\nadd_executable(MyApp main.cpp)\ntarget_link_libraries(MyApp PRIVATE CrashCatch::CrashCatch)\n</code></pre> <p>CMake will locate the headers and preconfigured target with no additional setup.</p> <p>Linux Note: You may optionally add <code>-rdynamic</code> or link <code>-ldl</code> for bettery symbol resolution during stack tracing: <pre><code>target_link_options(MyApp PRIVATE -rdynamic)\n</code></pre></p>"},{"location":"cmake/#example","title":"\ud83e\uddea Example","text":"<p>See <code>examples/</code> folder for fully working sample projects that compile with CMake.</p>"},{"location":"contributing/","title":"Contributing to CrashCatch","text":"<p>Thank you for considering contributing to CrashCatch! We welcome contributions that improve the functionality, documentation, or general usability of the project. By following the guidelines below, you'll help ensure that your contributions are aligned with the project's goals and ready for review.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<p>We follow a simple process for contributions:</p> <ol> <li> <p>Fork the Repository:    Fork the CrashCatch repository to your own GitHub account.</p> </li> <li> <p>Clone Your Fork:    Clone your fork to your local machine:    <pre><code>git clone https://github.com/your-username/CrashCatch.git\n</code></pre></p> </li> <li> <p>Create a New Branch:     Create a new branch for your changes:     <pre><code>git checkout -b your-branch-name\n</code></pre></p> </li> <li>Make Your Changes:</li> <li>Write code or modifyy documentation as needed.</li> <li>Ensure your changes follow the project's coding standards and guidelines.</li> <li>If you are adding a new feature or fixing a bug, please add unit tests or modify exisitn gone where appropriate.</li> <li>Commit Your Changes:     Commit your changes with a clear and concise commit message. Use the following format:     <pre><code>git add .\ngit commit -m \"Your commit message\"\n</code></pre></li> <li>Push Your Changes:     Push your changes to your fork:     <pre><code>git push origin your-branch-name\n</code></pre></li> <li>Create a Pull Request:</li> <li>Once you've pushed your changes, go to the original repository and create a pull request from your fork. Be sure to:</li> <li>Provide a description of the changes you've made.</li> <li>Reference any relevant issues (e.g., Fixes #123).</li> <li>Ensure that your changes pass any automated tests before submitting.</li> </ol>"},{"location":"contributing/#coding-style","title":"Coding Style","text":"<p>We strive for consistency in our codebase. Here are a few key points to keep in mind.  + Use camelCase for variable and fucntion names  + Use 4 spaces for indentation, not tabs.  + Add comments to explain complex logic or any important assumptions in the code.</p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>If you are contributing to the documentation, please ensure that:  + The text is clear and easy to understand.  + You follow the format used in other documentation files.   + You verify that all links and code samples are correct.</p>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We rely on automated tests to ensure the quality of the coddebase. If you are submitting a bug fix or a new feature:   + Please add or update tests to cover your changes.   + Ensure that all existing tests pass by running:</p> <pre><code>```bash\n#For C++;\nmake test\n```\n</code></pre>"},{"location":"contributing/#issues","title":"Issues","text":"<p>If you encounter any issues while using CrashCatch, please open an issue on the GitHub repository. Provide as much information as possible about the issue, including the steps to reproduce it and any relevant error messages.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of conduct","text":"<p>We respect the rights of all contributors and follow the Contributor Covenant to ensure a positive and respectful community.</p>"},{"location":"contributing/#license","title":"License","text":"<p>CrashCatch is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"examples/","title":"\ud83e\uddea Examples","text":"<p>CrashCatch comes with real-world usage examples to demonstrate how easy it is to integrate.</p> <p>All examples are located in the <code>examples/</code> folder.</p>"},{"location":"examples/#included-examples","title":"\ud83d\udcc1 Included Examples","text":""},{"location":"examples/#example_zeroconfigcpp","title":"\ud83d\udd39 Example_ZeroConfig.cpp","text":"<p>Uses the <code>#define CRASHCATCH_AUTO_INIT</code> macro to auto-initialize CrashCatch with no config.</p>"},{"location":"examples/#example_onelinercpp","title":"\ud83d\udd39 Example_OneLiner.cpp","text":"<p>Initializes CrashCatch at runtime with <code>CrashCatch::enable()</code>.</p>"},{"location":"examples/#example_fullconfigcpp","title":"\ud83d\udd39 Example_FullConfig.cpp","text":"<p>Demonstrates full customization: - <code>appVersion</code> - <code>buildConfig</code> - <code>onCrash</code> lambda - <code>showCrashDialog</code></p>"},{"location":"examples/#example_threadcrashcpp","title":"\ud83d\udd39 Example_ThreadCrash.cpp","text":"<p>Simulates a crash in a background thread to test thread safety and handler stability.</p>"},{"location":"examples/#example_dividebyzerocpp","title":"\ud83d\udd39 Example_divideByZero.cpp","text":"<p>Triggers a divide-by-zero exception to test signal handling for <code>SIGFPE</code> (Linux) or exception codes (Windows).</p>"},{"location":"examples/#example_oncrashcpp","title":"\ud83d\udd39 Example_onCrash.cpp","text":"<p>Demonstrates usage of the <code>onCrash(const CrashContext&amp;)</code> callback to perform pre-exit cleanup or logging. Shows how to access crash file paths, timestamps, and error codes inside the callback.</p>"},{"location":"examples/#example_uploadcrashcpp","title":"\ud83d\udd39 Example_UploadCrash.cpp","text":"<p>Simulates sending a crash report <code>.txt</code> or <code>.dmp</code> file to a remote server. Demonstrates how to use the <code>onCrash</code> callback to call a user-defined uploader function after a crash occurs.</p>"},{"location":"examples/#build-the-examples-via-cmake","title":"\ud83e\uddf0 Build the Examples (via CMake)","text":"<pre><code>mkdir build &amp;&amp; cd build\ncmake ..\ncmake --build .\n</code></pre> <p>Each example is compiled as its own executable: <pre><code>Example_ZeroConfig.exe\nExample_OneLiner.exe\nExample_FullConfig.exe\nExample_ThreadCrash.exe\nExample_divideByZero.exe\nExample_UploadCrash.exe\nExample_onCrash.exe\n</code></pre></p> <p>Each example will generate <code>.dmp</code> and <code>.txt</code> crash logs in the <code>./crash_dumps/</code> folder when triggered.</p>"},{"location":"license/","title":"\ud83d\udcc4 License \u2013 MIT","text":"<p>Copyright (c) 2025 Keith Pottratz</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"linux/","title":"\ud83d\udc27 Linux Support","text":"<p>CrashCatch v1.2.0 provides robust, out-of-the-box crash handling for native Linux C++ applications using POSIX signals and <code>backtrace()</code>.</p> <p>It captures detailed crash context, generates a human-readable <code>.txt</code> report, and includes a demangled stack trace and environment info \u2014 all from a single header.</p>"},{"location":"linux/#supported-signals","title":"\ud83d\udd25 Supported Signals","text":"<p>CrashCatch handles a wide set of fatal signals:</p> Signal Description <code>SIGSEGV</code> Segmentation fault (invalid memory access) <code>SIGABRT</code> Aborted process (e.g. <code>abort()</code>) <code>SIGFPE</code> Floating point exception (e.g. divide by zero) <code>SIGILL</code> Illegal instruction <code>SIGBUS</code> Bus error (e.g. misaligned memory access) <p>All signals trigger a crash log and invoke the optional <code>onCrash()</code> callback with full crash context.</p>"},{"location":"linux/#additional-linux-features","title":"\ud83e\udde0 Additional Linux Features","text":"<ul> <li>\u2705 Signal name &amp; number are logged in crash reports  </li> <li>\u2705 Full stack trace with demangled symbols (<code>__cxa_demangle</code>)  </li> <li>\u2705 Executable path detection via <code>/proc/self/exe</code> </li> <li>\u2705 Crash context includes signal, timestamp, paths, and notes  </li> <li>\u2705 Works in GUI and headless/CLI environments</li> </ul>"},{"location":"linux/#output-format","title":"\ud83d\udccb Output Format","text":"<p>When a crash occurs, CrashCatch will:</p> <ul> <li>Create a folder like <code>./crash_dumps/</code></li> <li>Save a <code>.txt</code> log file including:</li> <li>Timestamp</li> <li>Stack trace (via <code>backtrace()</code>)</li> <li>Application version &amp; build config</li> <li>Executable path</li> <li>Any additional notes set in config</li> </ul>"},{"location":"linux/#-","title":"---","text":""},{"location":"linux/#example-output","title":"\ud83e\uddfe Example Output","text":""},{"location":"linux/#crash-report-signal-segmentation-fault-11-timestamp-2025-04-04_23-07-34-environment-info-app-version-unknown-build-config-release-platform-linux-executable-homekeithcrashcatchbuildcrashcatchtest-stack-trace-0-crashcatchtest0x4936-0x5b96db8be936-1-crashcatchtest0x4daf-0x5b96db8bedaf-2-libx86_64-linux-gnulibcso60x45330-0x754c6ea45330-3-crashcatchtest0x3abd-0x5b96db8bdabd-4-crashcatchtest0x6dcd-0x5b96db8c0dcd-5-crashcatchtest0x6d79-0x5b96db8c0d79-6-crashcatchtest0x6d1a-0x5b96db8c0d1a-7-crashcatchtest0x6cea-0x5b96db8c0cea-8-crashcatchtest0x6cca-0x5b96db8c0cca-9-libx86_64-linux-gnulibstdcso60xecdb4-0x754c6eeecdb4-10-libx86_64-linux-gnulibcso60x9caa4-0x754c6ea9caa4-11-libx86_64-linux-gnulibcso60x129c3c-0x754c6eb29c3c","title":"<pre><code>Crash Report\n============\nSignal: Segmentation fault (11)\nTimestamp: 2025-04-04_23-07-34\n\nEnvironment Info:\nApp Version: unknown\nBuild Config: Release\nPlatform: Linux\nExecutable: /home/keith/crashcatch/build/CrashCatchTest\n\n\nStack Trace:\n  [0]: ./CrashCatchTest(+0x4936) [0x5b96db8be936]\n  [1]: ./CrashCatchTest(+0x4daf) [0x5b96db8bedaf]\n  [2]: /lib/x86_64-linux-gnu/libc.so.6(+0x45330) [0x754c6ea45330]\n  [3]: ./CrashCatchTest(+0x3abd) [0x5b96db8bdabd]\n  [4]: ./CrashCatchTest(+0x6dcd) [0x5b96db8c0dcd]\n  [5]: ./CrashCatchTest(+0x6d79) [0x5b96db8c0d79]\n  [6]: ./CrashCatchTest(+0x6d1a) [0x5b96db8c0d1a]\n  [7]: ./CrashCatchTest(+0x6cea) [0x5b96db8c0cea]\n  [8]: ./CrashCatchTest(+0x6cca) [0x5b96db8c0cca]\n  [9]: /lib/x86_64-linux-gnu/libstdc++.so.6(+0xecdb4) [0x754c6eeecdb4]\n  [10]: /lib/x86_64-linux-gnu/libc.so.6(+0x9caa4) [0x754c6ea9caa4]\n  [11]: /lib/x86_64-linux-gnu/libc.so.6(+0x129c3c) [0x754c6eb29c3c]\n</code></pre>","text":""},{"location":"linux/#testing-linux-crashes","title":"Testing Linux Crashes","text":""},{"location":"linux/#null-pointer","title":"Null Pointer","text":"<pre><code>#include \"CrashCatch.hpp\"\nint* ptr = nullptr;\n*ptr = 42; // SIGSEGV\n\nreturn 0;\n</code></pre>"},{"location":"linux/#divide-by-zero","title":"Divide by zero","text":"<pre><code>#include \"CrashCatch.hpp\"\nint main() {\n    int zero = 0;\n    int crash = 1 / zero;\n\n    retrun crash;\n}\n</code></pre>"},{"location":"linux/#threaded-fault","title":"Threaded Fault","text":"<p>```cpp</p>"},{"location":"linux/#include","title":"include","text":""},{"location":"linux/#include-crashcatchhpp","title":"include \"CrashCatch.hpp\" <p>void crashFunc(){     int p = nullptr;     p = 5;  }  int main() {     std::thread t(crashFunc);     t.join();  }  ```</p>   <p>## CMake Setup  No special setup is required on Linux. Simply include the header and optionalling link with <code>-rdynamic</code> to improve symbol resolution  <code>cmake  g++ -std=c++17 main.cpp -rdynamic -o crash_app</code> <code>-rdynamic</code> allows symbol names to appear in stack traces generated by <code>backtrace_symbol()</code></p>   <p>## \ud83d\udea7 Known Limitations * Crash logs are <code>.txt</code> only \u2014 no core dump or <code>.dmp</code> generation yet</p> <ul> <li>Stack traces may not always show full function names without <code>-rdynamic</code></li> </ul>","text":""},{"location":"linux/#gui-message-boxes-are-not-supported-on-linux-yet","title":"* GUI message boxes are not supported on Linux (yet)","text":""},{"location":"linux/#future-improvements","title":"\ud83d\udce6 Future Improvements","text":"<ul> <li> <p>Signal handler chaining (to avoid interfering with other handlers)</p> </li> <li> <p>Optional generation of Linux core dumps</p> </li> <li> <p>Demangling of C++ function names</p> </li> <li> <p>macOS crash handling support</p> </li> <li> <p>JSON-based crash logs</p> </li> </ul>"},{"location":"quickstart/","title":"\ud83d\ude80 Quick Start","text":"<p>CrashCatch is designed to be usable in less than 10 seconds. Choose from one of the quick-start modes below:</p>"},{"location":"quickstart/#zero-config-auto-init","title":"\ud83d\udfe2 Zero Config (Auto-init)","text":"<pre><code>#define CRASHCATCH_AUTO_INIT\n#include \"CrashCatch.hpp\"\n\nint main() {\n    int* ptr = nullptr;\n    *ptr = 42; // simulated crash\n}\n</code></pre>"},{"location":"quickstart/#one-liner-setup","title":"\ud83d\udfe1 One-Liner Setup","text":"<pre><code>#include \"CrashCatch.hpp\"\n\nint main() {\n    CrashCatch::enable();\n    int* ptr = nullptr;\n    *ptr = 42;\n}\n</code></pre>"},{"location":"quickstart/#full-configuration","title":"\ud83d\udd27 Full Configuration","text":"<pre><code>#include \"CrashCatch.hpp\"\n\nint main() {\n    CrashCatch::Config config;\n    config.appVersion = \"1.0.0\";\n    config.buildConfig = \"Release\";\n    config.additionalNotes = \"This is a test build.\";\n    config.showCrashDialog = true;\n    config.onCrash = [] {\n        std::cout &lt;&lt; \"Performing cleanup before crash...\\n\";\n    };\n\n    CrashCatch::initialize(config);\n\n    int* ptr = nullptr;\n    *ptr = 42;\n}\n</code></pre> <p>After a crash, CrashCatch generates a <code>.dmp</code> and <code>.txt</code> log in <code>./crash_dumps/</code> by default.</p>"},{"location":"screenshots/","title":"\ud83d\udcf8 Screenshots","text":"<p>Below are example screenshots of CrashCatch in action.</p>"},{"location":"screenshots/#zero-config-example","title":"\ud83d\udfe2 Zero Config Example","text":"<p>Auto-init mode with no setup required.</p> <p></p>"},{"location":"screenshots/#one-liner-setup","title":"\ud83d\udfe1 One-Liner Setup","text":"<p>Simple usage with <code>CrashCatch::enable()</code>.</p> <p></p>"},{"location":"screenshots/#full-configuration","title":"\u2699\ufe0f Full Configuration","text":"<p>Custom version tags, cleanup callbacks, and message box enabled.</p> <p></p>"},{"location":"screenshots/#crash-dialog","title":"\ud83d\udccb Crash Dialog","text":"<p>Optional message box shown after crash.</p> <p></p> <p>Make sure crash logging is enabled and check the <code>./crash_dumps/</code> directory for output.</p>"}]}